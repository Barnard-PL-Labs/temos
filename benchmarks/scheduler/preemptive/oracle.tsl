assume {
  (G (! (((gt runtime1) runtime2) && ((gt runtime2) runtime1))));
  (G ((((gt runtime1) runtime2) && ([runtime1 <- ((add runtime1) c1())] W ((gt runtime2) runtime1))) -> (F ((gt runtime2) runtime1))));
  (G ((((gt runtime2) runtime1) && ([runtime2 <- ((add runtime2) c1())] W ((gt runtime1) runtime2))) -> (F ((gt runtime1) runtime2))));
  (G (! ((run job1) && (run job2))));
}

guarantee {
  (G ([next <- job1] || [next <- job2]));
  (G ((run job1) -> [next <- job1]));
  (G ((run job2) -> [next <- job2]));
  (G ([next <- job1] <-> [runtime1 <- ((add runtime1) c1())]));
  (G ([next <- job2] <-> [runtime2 <- ((add runtime2) c1())]));
  (G ((! ((run job1) || (run job2))) -> ((((gt runtime1) runtime2) -> [next <- job1]) && (((gt runtime2) runtime1) -> [next <- job2]))));
  (G ((G (! ((run job1) || (run job2)))) -> ((G (F [next <- job1])) && (G (F [next <- job2])))));
}
