initially assume {
	gte c0() balance;
}

always assume {
	gte c0() x;
	!(deposit x && withdraw y);
	[balance <- balance] <-> (gte c0() balance -> X gte c0() balance);
	!(gte c0() balance && !(gte balance c0()));
	gte c0() balance && [balance <- add balance x] -> X gte c0() balance;
	gte c0() balance && [balance <- iteSub balance y] -> X gte c0() balance;
}

always guarantee {
	deposit x  -> F [balance <- add balance x];
	withdraw y -> [balance <- iteSub balance y] && [out <- iteSub balance y];
	[balance <- balance] || deposit x || withdraw y;
	gte c0() balance;
}
