//#LIA#

always assume {
	!(enqueue job1 && dequeue job1);
	!(enqueue job2 && dequeue job2);
}

guarantee {
	![next <- job1] W enqueue job1;
	![next <- job2] W enqueue job2;
}

always guarantee {
	[next <- job1] || [next <- job2] || [next <- idle];

	enqueue job1 -> (F [next <- job1]) || F dequeue job1;
	enqueue job2 -> (F [next <- job2]) || F dequeue job2;

	dequeue job1 -> ![next <- job1] W enqueue job1;
	dequeue job2 -> ![next <- job2] W enqueue job2;

	enqueue job2 -> ((gt vruntime1 vruntime2 -> ![next <- job1]) W dequeue job2);
	enqueue job1 -> ((gt vruntime2 vruntime1 -> ![next <- job2]) W dequeue job1);

	[next <- job1] <-> [vruntime1 <- add vruntime1 c1()];
	[next <- job2] <-> [vruntime2 <- add vruntime2 c1()];
}

